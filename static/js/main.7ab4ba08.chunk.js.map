{"version":3,"sources":["components/DogImages.tsx","utils/API.tsx","components/DogTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DogImages","images","Box","m","p","length","GridList","cellHeight","cols","map","src","index","GridListTile","alt","Array","fill","_","Skeleton","animation","variant","height","dogAPI","getDogs","axios","get","getImages","query","DogTable","dogs","handleClick","event","breed","currentTarget","innerText","toLowerCase","API","then","results","data","message","console","log","setImages","useState","Grid","container","spacing","item","xs","Button","fullWidth","onClick","width","App","setAllDogs","filteredDogs","setFilteredDogs","useEffect","dogsArray","Object","keys","className","Container","display","justifyContent","Typography","TextField","id","label","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ab4ba08.chunk.js","sourcesContent":["import { Box, GridList, GridListTile } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\ninterface IProps {\n  images: string[];\n}\n\nfunction DogImages({ images }: IProps) {\n  return (\n    <Box m={1} p={1}>\n      {images.length ? (\n        <GridList cellHeight={160} cols={4}>\n          {images.map((src, index) => {\n            return (\n              <GridListTile key={index}>\n                <img src={src} alt={`dog-${index}`} />\n              </GridListTile>\n            );\n          })}\n        </GridList>\n      ) : (\n        <GridList cellHeight={160} cols={4}>\n          {Array(8)\n            .fill(null)\n            .map((_, index) => {\n              return (\n                <GridListTile key={index}>\n                  <Skeleton\n                    animation=\"wave\"\n                    variant=\"rect\"\n                    height={160}\n                  ></Skeleton>\n                </GridListTile>\n              );\n            })}\n        </GridList>\n      )}\n    </Box>\n  );\n}\n\nexport default DogImages;\n","import axios from \"axios\";\nimport { DogsResponse, ImagesResponse } from \"../interfaces\";\n\nconst dogAPI = {\n  getDogs: function () {\n    return axios.get<DogsResponse>(\"https://dog.ceo/api/breeds/list/all\");\n  },\n  getImages: function (query: string) {\n    return axios.get<ImagesResponse>(`https://dog.ceo/api/breed/${query}/images/random/8`);\n  },\n};\n\nexport default dogAPI;\n","import { MouseEvent, useState } from \"react\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport DogImages from \"./DogImages\";\nimport API from \"../utils/API\"\n\ninterface IProps {\n  dogs: string[];\n}\n\nfunction DogTable({ dogs }: IProps) {\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    const breed = event.currentTarget.innerText.toLowerCase()\n    API.getImages(breed).then(results => {\n      const images = results.data.message\n      console.log(images);\n      setImages(images)\n    })\n  };\n\n  const [images, setImages] = useState<string[]>([]);\n\n  return (\n    <>\n      {dogs.length ? (\n        <Grid container spacing={3}>\n          {dogs.map((breed, index) => {\n            return (\n              <Grid item key={index} xs={3}>\n                <Button\n                  variant=\"contained\"\n                  fullWidth={true}\n                  onClick={handleClick}\n                >\n                  {breed}\n                </Button>\n              </Grid>\n            );\n          })}\n        </Grid>\n      ) : (\n        <Grid container spacing={3}>\n          {Array(12)\n            .fill(null)\n            .map((_, index) => {\n              return (\n                <Grid item key={index} xs={3}>\n                  <Skeleton\n                    animation=\"wave\"\n                    variant=\"text\"\n                    width=\"100%\"\n                    height={40}\n                  ></Skeleton>\n                </Grid>\n              );\n            })}\n        </Grid>\n      )}\n      <DogImages images={images}></DogImages>\n    </>\n  );\n}\n\nexport default DogTable;\n","import { Box, Container, TextField, Typography } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport DogTable from \"./components/DogTable\";\nimport API from \"./utils/API\";\n\nfunction App() {\n  const [allDogs, setAllDogs] = useState<string[]>([]);\n  const [filteredDogs, setFilteredDogs] = useState<string[]>([]);\n\n  useEffect(() => {\n    API.getDogs().then((results) => {\n      const dogsArray = Object.keys(results.data.message);\n      setAllDogs(dogsArray)\n      setFilteredDogs(dogsArray)\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Box display=\"flex\" justifyContent=\"space-between\" p={1} m={1}>\n          <Box p={1}>\n            <Typography variant=\"h1\">Dogs!</Typography>\n          </Box>\n          <Box p={1} m={1}>\n            <TextField id=\"search-breeds\" label=\"Search\" />\n          </Box>\n        </Box>\n        <DogTable dogs={filteredDogs.slice(0, 12)} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}