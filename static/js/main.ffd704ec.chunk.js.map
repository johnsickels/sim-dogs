{"version":3,"sources":["components/DogImages.tsx","utils/API.tsx","components/DogButtonsLoaded.tsx","components/DogButtons.tsx","components/DogTable.tsx","components/DogHeader.tsx","components/DogDashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DogImages","images","imagesStatus","setImagesStatus","useEffect","Promise","all","map","image","imageUrl","resolve","reject","loadImg","Image","src","onload","onerror","err","then","catch","console","log","Box","m","p","GridList","cellHeight","cols","Array","fill","_","index","GridListTile","Skeleton","animation","variant","height","alt","dogAPI","getDogs","axios","get","getImages","query","DogButtonsLoaded","dogs","activeDog","setActiveDog","handleClick","handleActiveDog","event","newActiveDog","currentTarget","innerText","toLowerCase","dog","Button","fullWidth","aria-label","onClick","style","backgroundColor","DogButtons","buttonsStatus","Alert","severity","Grid","container","spacing","item","xs","width","DogTable","useState","setImages","breed","API","results","data","message","DogHeader","allDogs","setButtonsStatus","setFilteredDogs","display","justifyContent","Typography","TextField","id","label","onChange","filter","target","value","filteredList","indexOf","length","DogDashboard","setAllDogs","filteredDogs","dogsArray","Object","keys","Container","slice","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffd704ec.chunk.js","sourcesContent":["import { useEffect } from \"react\";\nimport { Box, GridList, GridListTile } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { Dispatcher, Status } from \"../interfaces\";\n\ninterface IProps {\n  images: string[];\n  imagesStatus: string;\n  setImagesStatus: Dispatcher<Status>;\n}\n\nfunction DogImages({ images, imagesStatus, setImagesStatus }: IProps) {\n  useEffect(() => {\n    const loadImage = (imageUrl: string) => {\n      return new Promise((resolve, reject) => {\n        const loadImg = new Image();\n        loadImg.src = imageUrl;\n        loadImg.onload = () => resolve(imageUrl);\n        loadImg.onerror = (err) => reject(err);\n      });\n    };\n\n    Promise.all(images.map((image) => loadImage(image)))\n      .then(() => setImagesStatus(\"loaded\"))\n      .catch((err) => console.log(\"Failed to load images\", err));\n  }, [images, setImagesStatus]);\n\n  switch (imagesStatus) {\n    case \"loading\":\n      return (\n        <Box m={1} p={1}>\n          <GridList cellHeight={160} cols={4}>\n            {Array(8)\n              .fill(null)\n              .map((_, index) => {\n                return (\n                  <GridListTile key={index}>\n                    <Skeleton\n                      animation=\"wave\"\n                      variant=\"rect\"\n                      height={160}\n                    ></Skeleton>\n                  </GridListTile>\n                );\n              })}\n          </GridList>\n        </Box>\n      );\n    case \"loaded\":\n      return (\n        <Box m={1} p={1}>\n          <GridList cellHeight={160} cols={4}>\n            {images.map((src, index) => {\n              return (\n                <GridListTile key={index}>\n                  <img src={src} alt={`dog-${index}`} />\n                </GridListTile>\n              );\n            })}\n          </GridList>\n        </Box>\n      );\n    default:\n      return null;\n  }\n}\n\nexport default DogImages;\n","import axios from \"axios\";\nimport { DogsResponse, ImagesResponse } from \"../interfaces\";\n\nconst dogAPI = {\n  getDogs: function () {\n    return axios.get<DogsResponse>(\"https://dog.ceo/api/breeds/list/all\");\n  },\n  getImages: function (query: string) {\n    return axios.get<ImagesResponse>(`https://dog.ceo/api/breed/${query}/images/random/8`);\n  },\n};\n\nexport default dogAPI;\n","import { MouseEvent } from \"react\";\nimport { Button, GridList, GridListTile } from \"@material-ui/core\";\nimport { Dispatcher } from \"../interfaces\";\n\ninterface IProps {\n  dogs: string[];\n  activeDog: string;\n  setActiveDog: Dispatcher<string>;\n  handleClick: (event: MouseEvent<HTMLElement>) => void;\n}\n\nfunction DogButtonsLoaded({\n  dogs,\n  activeDog,\n  setActiveDog,\n  handleClick,\n}: IProps) {\n  const handleActiveDog = (event: MouseEvent<HTMLElement>) => {\n    const newActiveDog = event.currentTarget.innerText.toLowerCase();\n    handleClick(event);\n    setActiveDog(newActiveDog);\n  };\n\n  return (\n    <GridList cellHeight={50} cols={4}>\n      {dogs.map((dog, index) => {\n        return (\n          <GridListTile key={index}>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              aria-label={dog}\n              onClick={handleActiveDog}\n              style={dog === activeDog ? { backgroundColor: \"violet\" } : {}}\n            >\n              {dog}\n            </Button>\n          </GridListTile>\n        );\n      })}\n    </GridList>\n  );\n}\n\nexport default DogButtonsLoaded;\n","import { Grid } from \"@material-ui/core\";\nimport { Alert, Skeleton } from \"@material-ui/lab\";\nimport { MouseEvent } from \"react\";\nimport { Dispatcher, Status } from \"../interfaces\";\nimport DogButtonsLoaded from \"./DogButtonsLoaded\";\n\ninterface IProps {\n  dogs: string[];\n  activeDog: string;\n  buttonsStatus: Status;\n  handleClick: (event: MouseEvent<HTMLElement>) => void;\n  setActiveDog: Dispatcher<string>;\n}\n\nfunction DogButtons({\n  dogs,\n  activeDog,\n  buttonsStatus,\n  setActiveDog,\n  handleClick,\n}: IProps) {\n  switch (buttonsStatus) {\n    case \"loaded\":\n      return (\n        <DogButtonsLoaded\n          dogs={dogs}\n          activeDog={activeDog}\n          handleClick={handleClick}\n          setActiveDog={setActiveDog}\n        ></DogButtonsLoaded>\n      );\n    case \"none\":\n      return (\n        <Alert severity=\"warning\">No dogs found! Try another search</Alert>\n      );\n    default:\n      return (\n        <Grid container spacing={3}>\n          {Array(12)\n            .fill(null)\n            .map((_, index) => {\n              return (\n                <Grid item key={index} xs={3}>\n                  <Skeleton\n                    animation=\"wave\"\n                    variant=\"text\"\n                    width=\"100%\"\n                    height={40}\n                  ></Skeleton>\n                </Grid>\n              );\n            })}\n        </Grid>\n      );\n  }\n}\n\nexport default DogButtons;\n","import { MouseEvent, useState } from \"react\";\nimport DogImages from \"./DogImages\";\nimport API from \"../utils/API\";\nimport { Dispatcher, Status } from \"../interfaces\";\nimport DogButtons from \"./DogButtons\";\n\ninterface IProps {\n  dogs: string[];\n  buttonsStatus: Status;\n  imagesStatus: string,\n  activeDog: string,\n  setActiveDog: Dispatcher<string>,\n  setImagesStatus: Dispatcher<Status>,\n}\n\nfunction DogTable({\n  dogs,\n  activeDog,\n  buttonsStatus,\n  imagesStatus,\n  setActiveDog,\n  setImagesStatus,\n}: IProps) {\n  const handleClick = (event: MouseEvent<HTMLElement>) => {\n    setImagesStatus(\"loading\");\n    const breed = event.currentTarget.innerText.toLowerCase();\n    API.getImages(breed).then((results) => {\n      const images = results.data.message;\n      setImages(images);\n    });\n  };\n\n  const [images, setImages] = useState<string[]>([]);\n\n  return (\n    <>\n      <DogButtons\n        dogs={dogs}\n        activeDog={activeDog}\n        buttonsStatus={buttonsStatus}\n        handleClick={handleClick}\n        setActiveDog={setActiveDog}\n      ></DogButtons>\n      <DogImages\n        images={images}\n        imagesStatus={imagesStatus}\n        setImagesStatus={setImagesStatus}\n      ></DogImages>\n    </>\n  );\n}\n\nexport default DogTable;\n","import { Box, TextField, Typography } from \"@material-ui/core\";\nimport { Dispatcher, Status } from \"../interfaces\";\n\ninterface IProps {\n  allDogs: string[];\n  setButtonsStatus: Dispatcher<Status>;\n  setImagesStatus: Dispatcher<Status>;\n  setFilteredDogs: Dispatcher<string[]>;\n  setActiveDog: Dispatcher<string>\n}\nfunction DogHeader({ allDogs, setButtonsStatus, setImagesStatus, setFilteredDogs, setActiveDog }: IProps) {\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setImagesStatus(\"ready\");\n    setActiveDog(\"\")\n    const filter = event.target.value.toLowerCase();\n    const filteredList = allDogs.filter((dog) => {\n      return dog.indexOf(filter) !== -1;\n    });\n    if (!filteredList.length) {\n      setButtonsStatus(\"none\");\n    } else {\n      setButtonsStatus(\"loaded\");\n    }\n    setFilteredDogs(filteredList);\n  };\n\n  return (\n    <Box display=\"flex\" justifyContent=\"space-between\" p={1} m={1}>\n      <Box p={1}>\n        <Typography variant=\"h2\">Dogs!</Typography>\n      </Box>\n      <Box p={1} m={1}>\n        <TextField\n          id=\"search-breeds\"\n          label=\"Search\"\n          onChange={handleSearchChange}\n        />\n      </Box>\n    </Box>\n  );\n}\nexport default DogHeader;\n","import { useEffect, useState } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport DogTable from \"../components/DogTable\";\nimport DogHeader from \"./DogHeader\";\nimport API from \"../utils/API\";\nimport { Status } from \"../interfaces\";\n\nfunction DogDashboard() {\n  const [allDogs, setAllDogs] = useState<string[]>([]);\n  const [filteredDogs, setFilteredDogs] = useState<string[]>([]);\n  const [buttonsStatus, setButtonsStatus] = useState<Status>(\"ready\");\n  const [imagesStatus, setImagesStatus] = useState<Status>(\"ready\");\n  const [activeDog, setActiveDog] = useState<string>(\"\");\n\n  useEffect(() => {\n    setButtonsStatus(\"loading\");\n    API.getDogs().then((results) => {\n      const dogsArray = Object.keys(results.data.message);\n      setAllDogs(dogsArray);\n      setFilteredDogs(dogsArray);\n      setButtonsStatus(\"loaded\");\n    });\n  }, []);\n\n  return (\n    <Container>\n      <DogHeader\n        allDogs={allDogs}\n        setButtonsStatus={setButtonsStatus}\n        setImagesStatus={setImagesStatus}\n        setFilteredDogs={setFilteredDogs}\n        setActiveDog={setActiveDog}\n      ></DogHeader>\n      <DogTable\n        dogs={filteredDogs.slice(0, 12)}\n        activeDog={activeDog}\n        buttonsStatus={buttonsStatus}\n        imagesStatus={imagesStatus}\n        setActiveDog={setActiveDog}\n        setImagesStatus={setImagesStatus}\n      />\n    </Container>\n  );\n}\n\nexport default DogDashboard;\n","import DogDashboard from \"./components/DogDashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DogDashboard></DogDashboard>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}