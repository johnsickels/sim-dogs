{"version":3,"sources":["components/DogImagesSkeleton.tsx","components/DogImagesLoaded.tsx","components/DogImages.tsx","utils/API.tsx","components/DogButtonLoaded.tsx","components/DogButtonsLoaded.tsx","components/DogButtonsSkeleton.tsx","components/DogButtons.tsx","components/DogTable.tsx","components/DogHeader.tsx","components/DogDashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DogImagesSkeleton","Box","m","p","GridList","cellHeight","cols","Array","fill","map","_","index","GridListTile","Skeleton","animation","variant","height","DogImagesLoaded","images","style","backgroundColor","src","alt","DogImages","imagesStatus","setImagesStatus","useEffect","Promise","all","image","imageUrl","resolve","reject","loadImg","Image","onload","onerror","err","then","length","catch","console","log","dogAPI","getDogs","axios","get","getImages","query","DogButtonLoaded","dog","activeDog","setActiveDog","handleClick","Button","fullWidth","aria-label","onClick","event","newActiveDog","currentTarget","innerText","toLowerCase","background","color","textTransform","DogButtonsLoaded","dogs","DogButtonsSkeleton","width","DogButtons","buttonsStatus","Alert","severity","DogTable","useState","setImages","breed","API","results","data","message","DogHeader","allDogs","setButtonsStatus","setFilteredDogs","display","justifyContent","Typography","TextField","id","label","onChange","filter","target","value","filteredList","indexOf","DogDashboard","setAllDogs","filteredDogs","dogsArray","Object","keys","Container","slice","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7caa393.chunk.js","sourcesContent":["import { Box, GridList, GridListTile } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\nfunction DogImagesSkeleton() {\n  return (\n    <Box m={1} p={1}>\n      <GridList cellHeight={160} cols={4}>\n        {Array(8)\n          .fill(null)\n          .map((_, index) => {\n            return (\n              <GridListTile key={index}>\n                <Skeleton\n                  animation=\"wave\"\n                  variant=\"rect\"\n                  height={160}\n                ></Skeleton>\n              </GridListTile>\n            );\n          })}\n      </GridList>\n    </Box>\n  );\n}\n\nexport default DogImagesSkeleton;\n","import { Box, GridList, GridListTile } from \"@material-ui/core\";\n\ninterface IProps {\n  images: string[];\n}\n\nfunction DogImagesLoaded({ images }: IProps) {\n  return (\n    <Box p={2} style={{ backgroundColor: \"#dedede\" }}>\n      <GridList cellHeight={160} cols={4}>\n        {images.map((src, index) => {\n          return (\n            <GridListTile key={index}>\n              <img src={src} alt={`dog-${index}`} />\n            </GridListTile>\n          );\n        })}\n      </GridList>\n    </Box>\n  );\n}\n\nexport default DogImagesLoaded;\n","import { useEffect } from \"react\";\nimport DogImagesSkeleton from \"./DogImagesSkeleton\";\nimport DogImagesLoaded from \"./DogImagesLoaded\";\nimport { Dispatcher, Status } from \"../interfaces\";\n\ninterface IProps {\n  images: string[];\n  imagesStatus: string;\n  setImagesStatus: Dispatcher<Status>;\n}\n\nfunction DogImages({ images, imagesStatus, setImagesStatus }: IProps) {\n  useEffect(() => {\n    const loadImage = (imageUrl: string) => {\n      return new Promise((resolve, reject) => {\n        const loadImg = new Image();\n        loadImg.src = imageUrl;\n        loadImg.onload = () => resolve(imageUrl);\n        loadImg.onerror = (err) => reject(err);\n      });\n    };\n\n    Promise.all(images.map((image) => loadImage(image)))\n      .then(() => {\n        if (images.length) {\n          setImagesStatus(\"loaded\");\n        } else {\n          setImagesStatus(\"none\")\n        }\n      })\n      .catch((err) => console.log(\"Failed to load images\", err));\n  }, [images, setImagesStatus]);\n\n  switch (imagesStatus) {\n    case \"loading\":\n      return <DogImagesSkeleton></DogImagesSkeleton>;\n    case \"loaded\":\n      return <DogImagesLoaded images={images}></DogImagesLoaded>;\n    default:\n      return null;\n  }\n}\n\nexport default DogImages;\n","import axios from \"axios\";\nimport { DogsResponse, ImagesResponse } from \"../interfaces\";\n\nconst dogAPI = {\n  getDogs: function () {\n    return axios.get<DogsResponse>(\"https://dog.ceo/api/breeds/list/all\");\n  },\n  getImages: function (query: string) {\n    return axios.get<ImagesResponse>(`https://dog.ceo/api/breed/${query}/images/random/8`);\n  },\n};\n\nexport default dogAPI;\n","import { Button } from \"@material-ui/core\";\nimport { MouseEvent } from \"react\";\nimport { Dispatcher } from \"../interfaces\";\n\ninterface IProps {\n  dog: string;\n  activeDog: string;\n  setActiveDog: Dispatcher<string>;\n  handleClick: (event: MouseEvent<HTMLElement>) => void;\n}\n\nfunction DogButtonLoaded({\n  dog,\n  activeDog,\n  setActiveDog,\n  handleClick,\n}: IProps) {\n  const handleActiveDog = (event: MouseEvent<HTMLElement>) => {\n    const newActiveDog = event.currentTarget.innerText.toLowerCase();\n    handleClick(event);\n    setActiveDog(newActiveDog);\n  };\n\n  return (\n    <Button\n      fullWidth\n      variant=\"contained\"\n      aria-label={dog}\n      onClick={handleActiveDog}\n      style={\n        dog === activeDog\n          ? {\n              background: \"linear-gradient(to right, #bb82fe, #554fff)\",\n              color: \"white\",\n              textTransform: \"lowercase\",\n            }\n          : { textTransform: \"lowercase\" }\n      }\n    >\n      {dog}\n    </Button>\n  );\n}\n\nexport default DogButtonLoaded;\n","import { MouseEvent } from \"react\";\nimport { GridList, GridListTile } from \"@material-ui/core\";\nimport { Dispatcher } from \"../interfaces\";\nimport DogButtonLoaded from \"./DogButtonLoaded\";\n\ninterface IProps {\n  dogs: string[];\n  activeDog: string;\n  setActiveDog: Dispatcher<string>;\n  handleClick: (event: MouseEvent<HTMLElement>) => void;\n}\n\nfunction DogButtonsLoaded({\n  dogs,\n  activeDog,\n  setActiveDog,\n  handleClick,\n}: IProps) {\n\n  return (\n    <GridList cellHeight={50} cols={4}>\n      {dogs.map((dog, index) => {\n        return (\n          <GridListTile key={index}>\n            <DogButtonLoaded\n              dog={dog}\n              activeDog={activeDog}\n              setActiveDog={setActiveDog}\n              handleClick={handleClick}\n            ></DogButtonLoaded>\n          </GridListTile>\n        );\n      })}\n    </GridList>\n  );\n}\n\nexport default DogButtonsLoaded;\n","import { GridList, GridListTile } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\nfunction DogButtonsSkeleton() {\n  return (\n    <GridList cellHeight={40} cols={4}>\n      {Array(12)\n        .fill(null)\n        .map((_, index) => {\n          return (\n            <GridListTile key={index}>\n              <Skeleton\n                animation=\"wave\"\n                variant=\"text\"\n                width=\"100%\"\n                height={40}\n              ></Skeleton>\n            </GridListTile>\n          );\n        })}\n    </GridList>\n  );\n}\n\nexport default DogButtonsSkeleton;\n","import { MouseEvent } from \"react\";\nimport { Alert } from \"@material-ui/lab\";\nimport DogButtonsLoaded from \"./DogButtonsLoaded\";\nimport DogButtonsSkeleton from \"./DogButtonsSkeleton\";\nimport { Dispatcher, Status } from \"../interfaces\";\n\ninterface IProps {\n  dogs: string[];\n  activeDog: string;\n  buttonsStatus: Status;\n  handleClick: (event: MouseEvent<HTMLElement>) => void;\n  setActiveDog: Dispatcher<string>;\n}\n\nfunction DogButtons({\n  dogs,\n  activeDog,\n  buttonsStatus,\n  setActiveDog,\n  handleClick,\n}: IProps) {\n  switch (buttonsStatus) {\n    case \"loaded\":\n      return (\n        <DogButtonsLoaded\n          dogs={dogs}\n          activeDog={activeDog}\n          handleClick={handleClick}\n          setActiveDog={setActiveDog}\n        ></DogButtonsLoaded>\n      );\n    case \"none\":\n      return (\n        <Alert severity=\"warning\">No dogs found! Try another search...</Alert>\n      );\n    default:\n      return <DogButtonsSkeleton></DogButtonsSkeleton>;\n  }\n}\n\nexport default DogButtons;\n","import { MouseEvent, useState } from \"react\";\nimport DogImages from \"./DogImages\";\nimport API from \"../utils/API\";\nimport { Dispatcher, Status } from \"../interfaces\";\nimport DogButtons from \"./DogButtons\";\n\ninterface IProps {\n  dogs: string[];\n  buttonsStatus: Status;\n  imagesStatus: string,\n  activeDog: string,\n  setActiveDog: Dispatcher<string>,\n  setImagesStatus: Dispatcher<Status>,\n}\n\nfunction DogTable({\n  dogs,\n  activeDog,\n  buttonsStatus,\n  imagesStatus,\n  setActiveDog,\n  setImagesStatus,\n}: IProps) {\n  const handleClick = (event: MouseEvent<HTMLElement>) => {\n    setImagesStatus(\"loading\");\n    const breed = event.currentTarget.innerText.toLowerCase();\n    API.getImages(breed).then((results) => {\n      const images = results.data.message;\n      setImages(images);\n    });\n  };\n\n  const [images, setImages] = useState<string[]>([]);\n\n  return (\n    <>\n      <DogButtons\n        dogs={dogs}\n        activeDog={activeDog}\n        buttonsStatus={buttonsStatus}\n        handleClick={handleClick}\n        setActiveDog={setActiveDog}\n      ></DogButtons>\n      <DogImages\n        images={images}\n        imagesStatus={imagesStatus}\n        setImagesStatus={setImagesStatus}\n      ></DogImages>\n    </>\n  );\n}\n\nexport default DogTable;\n","import { Box, TextField, Typography } from \"@material-ui/core\";\nimport { Dispatcher, Status } from \"../interfaces\";\n\ninterface IProps {\n  allDogs: string[];\n  setButtonsStatus: Dispatcher<Status>;\n  setImagesStatus: Dispatcher<Status>;\n  setFilteredDogs: Dispatcher<string[]>;\n  setActiveDog: Dispatcher<string>;\n}\nfunction DogHeader({\n  allDogs,\n  setButtonsStatus,\n  setImagesStatus,\n  setFilteredDogs,\n  setActiveDog,\n}: IProps) {\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setImagesStatus(\"ready\");\n    setActiveDog(\"\");\n    const filter = event.target.value.toLowerCase();\n    const filteredList = allDogs.filter((dog) => {\n      return dog.indexOf(filter) !== -1;\n    });\n    if (!filteredList.length) {\n      setButtonsStatus(\"none\");\n    } else {\n      setButtonsStatus(\"loaded\");\n    }\n    setFilteredDogs(filteredList);\n  };\n\n  return (\n    <Box display=\"flex\" justifyContent=\"space-between\" p={1} m={1}>\n      <Box p={1}>\n        <Typography variant=\"h3\" style={{ color: \"#5f67fe\" }}>\n          Dogs!\n        </Typography>\n      </Box>\n      <Box p={1} m={1}>\n        <TextField\n          id=\"search-breeds\"\n          label=\"Search\"\n          onChange={handleSearchChange}\n        />\n      </Box>\n    </Box>\n  );\n}\nexport default DogHeader;\n","import { useEffect, useState } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport DogTable from \"../components/DogTable\";\nimport DogHeader from \"./DogHeader\";\nimport API from \"../utils/API\";\nimport { Status } from \"../interfaces\";\n\nfunction DogDashboard() {\n  const [allDogs, setAllDogs] = useState<string[]>([]);\n  const [filteredDogs, setFilteredDogs] = useState<string[]>([]);\n  const [buttonsStatus, setButtonsStatus] = useState<Status>(\"ready\");\n  const [imagesStatus, setImagesStatus] = useState<Status>(\"ready\");\n  const [activeDog, setActiveDog] = useState<string>(\"\");\n\n  useEffect(() => {\n    setButtonsStatus(\"loading\");\n    API.getDogs().then((results) => {\n      const dogsArray = Object.keys(results.data.message);\n      setAllDogs(dogsArray);\n      setFilteredDogs(dogsArray);\n      setButtonsStatus(\"loaded\");\n    });\n  }, []);\n\n  return (\n    <Container>\n      <DogHeader\n        allDogs={allDogs}\n        setButtonsStatus={setButtonsStatus}\n        setImagesStatus={setImagesStatus}\n        setFilteredDogs={setFilteredDogs}\n        setActiveDog={setActiveDog}\n      ></DogHeader>\n      <DogTable\n        dogs={filteredDogs.slice(0, 12)}\n        activeDog={activeDog}\n        buttonsStatus={buttonsStatus}\n        imagesStatus={imagesStatus}\n        setActiveDog={setActiveDog}\n        setImagesStatus={setImagesStatus}\n      />\n    </Container>\n  );\n}\n\nexport default DogDashboard;\n","import DogDashboard from \"./components/DogDashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DogDashboard></DogDashboard>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}