{"version":3,"sources":["components/DogImagesSkeleton.tsx","components/DogImagesLoaded.tsx","components/DogImages.tsx","components/DogButtonLoaded.tsx","components/DogButtonsLoaded.tsx","components/DogButtonsSkeleton.tsx","components/DogButtons.tsx","utils/API.tsx","components/DogTable.tsx","components/DogHeader.tsx","components/DogDashboard.tsx","hooks/useQuery.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DogImagesSkeleton","Box","m","p","GridList","cellHeight","cols","Array","fill","map","_","index","GridListTile","Skeleton","animation","variant","height","DogImagesLoaded","images","style","backgroundColor","src","alt","DogImages","imagesStatus","setImagesStatus","useEffect","Promise","all","image","imageUrl","resolve","reject","loadImg","Image","onload","onerror","err","then","length","catch","console","log","DogButtonLoaded","dog","activeDog","setActiveDog","handleClick","Button","fullWidth","aria-label","onClick","event","newActiveDog","currentTarget","getAttribute","background","color","textTransform","DogButtonsLoaded","dogs","DogButtonsSkeleton","width","DogButtons","buttonsStatus","Alert","severity","dogAPI","getDogs","axios","get","getImages","query","DogTable","useState","setImages","breed","API","results","data","message","DogHeader","allDogs","setButtonsStatus","setFilteredDogs","display","justifyContent","Typography","TextField","id","label","onChange","filter","target","value","toLowerCase","filteredList","indexOf","DogDashboard","setAllDogs","filteredDogs","apiCall","initialStatus","error","setError","status","setStatus","setData","fetcher","useCallback","useQuery","dogsArray","Object","keys","Container","slice","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe4eb802.chunk.js","sourcesContent":["import { Box, GridList, GridListTile } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\n/**\n * Skeleton Images\n * \n * Placeholder for loading images\n * @returns \n */\nfunction DogImagesSkeleton() {\n  return (\n    <Box m={1} p={1}>\n      <GridList cellHeight={160} cols={4}>\n        {Array(8)\n          .fill(null)\n          .map((_, index) => {\n            return (\n              <GridListTile key={index}>\n                <Skeleton\n                  animation=\"wave\"\n                  variant=\"rect\"\n                  height={160}\n                ></Skeleton>\n              </GridListTile>\n            );\n          })}\n      </GridList>\n    </Box>\n  );\n}\n\nexport default DogImagesSkeleton;\n","import { Box, GridList, GridListTile } from \"@material-ui/core\";\n\ninterface IProps {\n  images: string[];\n}\n\n/**\n * Loaded Dog Images\n * \n * All dog images, loaded\n * @param props\n * @returns \n */\nfunction DogImagesLoaded({ images }: IProps) {\n  return (\n    <Box p={2} style={{ backgroundColor: \"#dedede\" }}>\n      <GridList cellHeight={160} cols={4}>\n        {images.map((src, index) => {\n          return (\n            <GridListTile key={index}>\n              <img src={src} alt={`dog-${index}`} />\n            </GridListTile>\n          );\n        })}\n      </GridList>\n    </Box>\n  );\n}\n\nexport default DogImagesLoaded;\n","import { useEffect } from \"react\";\nimport DogImagesSkeleton from \"./DogImagesSkeleton\";\nimport DogImagesLoaded from \"./DogImagesLoaded\";\nimport { Dispatcher, Status } from \"../interfaces\";\n\ninterface IProps {\n  images: string[];\n  imagesStatus: string;\n  setImagesStatus: Dispatcher<Status>;\n}\n\n/**\n * Dog Images\n *\n * Loading, loaded, or no images\n * @param props\n * @returns\n */\nfunction DogImages({ images, imagesStatus, setImagesStatus }: IProps) {\n  // on load or status change\n  useEffect(() => {\n    // preload image\n    const loadImage = (imageUrl: string) => {\n      return new Promise((resolve, reject) => {\n        const loadImg = new Image();\n        loadImg.src = imageUrl;\n        loadImg.onload = () => resolve(imageUrl);\n        loadImg.onerror = (err) => reject(err);\n      });\n    };\n\n    // wait for all images to load\n    Promise.all(images.map((image) => loadImage(image)))\n      .then(() => {\n        if (images.length) {\n          // if there are images\n          setImagesStatus(\"loaded\");\n        } else {\n          // else show nothing\n          setImagesStatus(\"none\");\n        }\n      })\n      .catch((err) => console.log(\"Failed to load images\", err));\n    // dependendcies\n  }, [images, setImagesStatus]);\n\n  switch (imagesStatus) {\n    case \"loading\":\n      return <DogImagesSkeleton></DogImagesSkeleton>;\n    case \"loaded\":\n      return <DogImagesLoaded images={images}></DogImagesLoaded>;\n    default:\n      return null;\n  }\n}\n\nexport default DogImages;\n","import { Button } from \"@material-ui/core\";\nimport { MouseEvent } from \"react\";\nimport { Dispatcher } from \"../interfaces\";\n\ninterface IProps {\n  dog: string;\n  activeDog: string;\n  setActiveDog: Dispatcher<string>;\n  handleClick: (event: MouseEvent<HTMLElement>) => void;\n}\n\n/**\n * Loaded Dog Button\n *\n * Single dog button\n * @param props\n * @returns\n */\nfunction DogButtonLoaded({\n  dog,\n  activeDog,\n  setActiveDog,\n  handleClick,\n}: IProps) {\n  const handleActiveDog = (event: MouseEvent<HTMLElement>) => {\n    // aria-label might be undefined..\n    const newActiveDog = event.currentTarget.getAttribute(\"aria-label\")!;\n\n    handleClick(event);\n    setActiveDog(newActiveDog);\n  };\n\n  return (\n    <Button\n      fullWidth\n      variant=\"contained\"\n      aria-label={dog}\n      onClick={handleActiveDog}\n      style={\n        dog === activeDog\n          ? {\n              background: \"linear-gradient(to right, #bb82fe, #554fff)\",\n              color: \"white\",\n              textTransform: \"lowercase\",\n            }\n          : { textTransform: \"lowercase\" }\n      }\n    >\n      {dog}\n    </Button>\n  );\n}\n\nexport default DogButtonLoaded;\n","import { MouseEvent } from \"react\";\nimport { GridList, GridListTile } from \"@material-ui/core\";\nimport { Dispatcher } from \"../interfaces\";\nimport DogButtonLoaded from \"./DogButtonLoaded\";\n\ninterface IProps {\n  dogs: string[];\n  activeDog: string;\n  setActiveDog: Dispatcher<string>;\n  handleClick: (event: MouseEvent<HTMLElement>) => void;\n}\n\n/**\n * Loaded Dog Buttons\n * \n * All dog buttons, loaded and ready for clicks\n * @param props\n * @returns \n */\nfunction DogButtonsLoaded({\n  dogs,\n  activeDog,\n  setActiveDog,\n  handleClick,\n}: IProps) {\n\n  return (\n    <GridList cellHeight={50} cols={4}>\n      {dogs.map((dog, index) => {\n        return (\n          <GridListTile key={index}>\n            <DogButtonLoaded\n              dog={dog}\n              activeDog={activeDog}\n              setActiveDog={setActiveDog}\n              handleClick={handleClick}\n            ></DogButtonLoaded>\n          </GridListTile>\n        );\n      })}\n    </GridList>\n  );\n}\n\nexport default DogButtonsLoaded;\n","import { GridList, GridListTile } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\n/**\n * Skeleton buttons\n * \n * Placeholder for loading buttons\n * @returns \n */\nfunction DogButtonsSkeleton() {\n  return (\n    <GridList cellHeight={40} cols={4}>\n      {Array(12)\n        .fill(null)\n        .map((_, index) => {\n          return (\n            <GridListTile key={index}>\n              <Skeleton\n                animation=\"wave\"\n                variant=\"text\"\n                width=\"100%\"\n                height={40}\n              ></Skeleton>\n            </GridListTile>\n          );\n        })}\n    </GridList>\n  );\n}\n\nexport default DogButtonsSkeleton;\n","import { MouseEvent } from \"react\";\nimport { Alert } from \"@material-ui/lab\";\nimport DogButtonsLoaded from \"./DogButtonsLoaded\";\nimport DogButtonsSkeleton from \"./DogButtonsSkeleton\";\nimport { Dispatcher, Status } from \"../interfaces\";\n\ninterface IProps {\n  dogs: string[];\n  activeDog: string;\n  buttonsStatus: Status;\n  handleClick: (event: MouseEvent<HTMLElement>) => void;\n  setActiveDog: Dispatcher<string>;\n}\n\n/**\n * Dog Buttons\n *\n * All buttons - empty, loading, or loaded\n * @param props\n * @returns\n */\nfunction DogButtons({\n  dogs,\n  activeDog,\n  buttonsStatus,\n  setActiveDog,\n  handleClick,\n}: IProps) {\n  // Conditional render\n  switch (buttonsStatus) {\n    // API has responded and filter has dogs\n    case \"loaded\":\n      return (\n        <DogButtonsLoaded\n          dogs={dogs}\n          activeDog={activeDog}\n          handleClick={handleClick}\n          setActiveDog={setActiveDog}\n        ></DogButtonsLoaded>\n      );\n    // API has responded, but filter matches no dogs\n    case \"none\":\n      return (\n        <Alert severity=\"warning\">No dogs found! Try another search...</Alert>\n      );\n    // API is pending, this has to be last to avoid a flicker on initial load\n    default:\n      return <DogButtonsSkeleton></DogButtonsSkeleton>;\n  }\n}\n\nexport default DogButtons;\n","import axios from \"axios\";\nimport { DogsResponse, ImagesResponse } from \"../interfaces\";\n\nconst dogAPI = {\n  /**\n   * Get Dogs\n   * @returns List of all breeds\n   */\n  getDogs: function () {\n    return axios.get<DogsResponse>(\"https://dog.ceo/api/breeds/list/all\");\n  },\n  /**\n   * Get Images\n   * @param query dog breed\n   * @returns Eight random dog images by breed\n   */\n  getImages: function (query: string) {\n    return axios.get<ImagesResponse>(`https://dog.ceo/api/breed/${query}/images/random/8`);\n  },\n};\n\nexport default dogAPI;\n","import { MouseEvent, useState } from \"react\";\nimport DogImages from \"./DogImages\";\nimport DogButtons from \"./DogButtons\";\nimport API from \"../utils/API\";\nimport { Dispatcher, Status } from \"../interfaces\";\n\ninterface IProps {\n  dogs: string[];\n  buttonsStatus: Status;\n  imagesStatus: string;\n  activeDog: string;\n  setActiveDog: Dispatcher<string>;\n  setImagesStatus: Dispatcher<Status>;\n}\n\n/**\n * Dog Table\n *\n * Buttons and Images\n * @param props\n * @returns\n */\nfunction DogTable({\n  dogs,\n  activeDog,\n  buttonsStatus,\n  imagesStatus,\n  setActiveDog,\n  setImagesStatus,\n}: IProps) {\n  // state\n  const [images, setImages] = useState<string[]>([]);\n\n  // on click\n  const handleClick = (event: MouseEvent<HTMLElement>) => {\n    // show skeleton images\n    setImagesStatus(\"loading\");\n\n    // get dog\n    const breed = event.currentTarget.getAttribute(\"aria-label\")!;\n\n    // 8 random images by breed\n    API.getImages(breed).then((results) => {\n      // array of image src\n      const images = results.data.message;\n\n      // set images\n      setImages(images);\n    });\n  };\n\n  return (\n    <>\n      <DogButtons\n        dogs={dogs}\n        activeDog={activeDog}\n        buttonsStatus={buttonsStatus}\n        handleClick={handleClick}\n        setActiveDog={setActiveDog}\n      ></DogButtons>\n      <DogImages\n        images={images}\n        imagesStatus={imagesStatus}\n        setImagesStatus={setImagesStatus}\n      ></DogImages>\n    </>\n  );\n}\n\nexport default DogTable;\n","import { Box, TextField, Typography } from \"@material-ui/core\";\nimport { Dispatcher, Status } from \"../interfaces\";\n\ninterface IProps {\n  allDogs: string[];\n  setButtonsStatus: Dispatcher<Status>;\n  setImagesStatus: Dispatcher<Status>;\n  setFilteredDogs: Dispatcher<string[]>;\n  setActiveDog: Dispatcher<string>;\n}\n\n/**\n * Dog Header\n * \n * Header and search input\n * @param props\n * @returns \n */\nfunction DogHeader({\n  allDogs,\n  setButtonsStatus,\n  setImagesStatus,\n  setFilteredDogs,\n  setActiveDog,\n}: IProps) {\n  // when the user types inthe search input field\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // clear the image component\n    setImagesStatus(\"ready\");\n\n    // clear the active dog\n    setActiveDog(\"\");\n\n    // capture user input\n    const filter = event.target.value.toLowerCase();\n\n    // an array of dogs that match the search\n    const filteredList = allDogs.filter((dog) => {\n      return dog.indexOf(filter) !== -1;\n    });\n\n    // if match\n    if (filteredList.length) {\n      setButtonsStatus(\"loaded\");\n      // if no match\n    } else {\n      setButtonsStatus(\"none\");\n    }\n\n    // set the array, even if empty\n    setFilteredDogs(filteredList);\n  };\n\n  return (\n    <Box display=\"flex\" justifyContent=\"space-between\" p={1} m={1}>\n      <Box p={1}>\n        <Typography variant=\"h3\" style={{ color: \"#5f67fe\" }}>\n          Dogs!\n        </Typography>\n      </Box>\n      <Box p={1} m={1}>\n        <TextField\n          id=\"search-breeds\"\n          label=\"Search\"\n          onChange={handleSearchChange}\n        />\n      </Box>\n    </Box>\n  );\n}\nexport default DogHeader;\n","import { useEffect, useState } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport DogTable from \"./DogTable\";\nimport DogHeader from \"./DogHeader\";\nimport API from \"../utils/API\";\nimport { useQuery } from \"../hooks/useQuery\";\nimport { DogsResponse, Status } from \"../interfaces\";\n\n/**\n * Dog Dashboard\n *\n * Main component\n * @returns\n */\nfunction DogDashboard() {\n  // state\n  const [allDogs, setAllDogs] = useState<string[]>([]);\n  const [filteredDogs, setFilteredDogs] = useState<string[]>([]);\n  const [imagesStatus, setImagesStatus] = useState<Status>(\"ready\");\n  const [activeDog, setActiveDog] = useState<string>(\"\");\n\n  const {\n    error,\n    status: buttonsStatus,\n    data,\n    setStatus: setButtonsStatus,\n  } = useQuery<DogsResponse>({\n    apiCall: API.getDogs,\n    initialStatus: \"loading\",\n  });\n\n  useEffect(() => {\n    if (data?.message) {\n      const dogsArray = Object.keys(data.message);\n      setAllDogs(dogsArray);\n      setFilteredDogs(dogsArray);\n    }\n  }, [data]);\n\n  if (error){\n    // set status to complain\n  }\n\n  return (\n    <Container>\n      <DogHeader\n        allDogs={allDogs}\n        setButtonsStatus={setButtonsStatus}\n        setImagesStatus={setImagesStatus}\n        setFilteredDogs={setFilteredDogs}\n        setActiveDog={setActiveDog}\n      ></DogHeader>\n      <DogTable\n        dogs={filteredDogs.slice(0, 12)}\n        activeDog={activeDog}\n        buttonsStatus={buttonsStatus}\n        imagesStatus={imagesStatus}\n        setActiveDog={setActiveDog}\n        setImagesStatus={setImagesStatus}\n      />\n    </Container>\n  );\n}\n\nexport default DogDashboard;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { AxiosError, AxiosResponse } from \"axios\";\nimport type { Dispatcher, Status } from \"../interfaces\";\n\ntype queryResponse<T> = {\n  error?: AxiosError;\n  status: Status;\n  data?: T;\n  setStatus: Dispatcher<Status>;\n};\n\ntype args<T> = {\n  apiCall: () => Promise<AxiosResponse<T>>;\n  initialStatus?: Status;\n};\n\nexport function useQuery<T>({\n  apiCall,\n  initialStatus = \"ready\",\n}: args<T>): queryResponse<T> {\n  const [error, setError] = useState<AxiosError | undefined>();\n  const [status, setStatus] = useState<Status>(initialStatus);\n  const [data, setData] = useState<T | undefined>();\n  const fetcher = useCallback(apiCall, [apiCall]);\n\n  useEffect(() => {\n    setStatus(\"loading\");\n\n    fetcher()\n      .then((results) => {\n        setData(results.data as T)\n        setStatus(\"loaded\");\n      })\n      .catch((error) => {\n        setError(error);\n      });\n\n  }, [fetcher]);\n  return { error, status, data, setStatus };\n}\n","import DogDashboard from \"./components/DogDashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DogDashboard></DogDashboard>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}