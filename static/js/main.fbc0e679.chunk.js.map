{"version":3,"sources":["components/DogImages.tsx","utils/API.tsx","components/DogTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DogImages","images","status","setStatus","useEffect","Promise","all","map","image","imageUrl","resolve","reject","loadImg","Image","src","onload","onerror","err","then","catch","console","log","Box","m","p","GridList","cellHeight","cols","Array","fill","_","index","GridListTile","Skeleton","animation","variant","height","alt","dogAPI","getDogs","axios","get","getImages","query","DogTable","dogs","handleClick","event","breed","currentTarget","innerText","toLowerCase","API","results","data","message","setImages","useState","length","Grid","container","spacing","item","xs","Button","fullWidth","onClick","width","App","allDogs","setAllDogs","filteredDogs","setFilteredDogs","dogsArray","Object","keys","className","Container","display","justifyContent","Typography","TextField","id","label","onChange","filter","target","value","filteredList","dog","indexOf","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbc0e679.chunk.js","sourcesContent":["import { Dispatch, SetStateAction, useEffect } from \"react\";\nimport { Box, GridList, GridListTile } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { Status } from \"../interfaces\";\n\ninterface Props {\n  images: string[];\n  status: string;\n  setStatus: Dispatch<SetStateAction<Status>>;\n}\n\nfunction DogImages({ images, status, setStatus }: Props) {\n  useEffect(() => {\n    const loadImage = (imageUrl: string) => {\n      return new Promise((resolve, reject) => {\n        const loadImg = new Image();\n        loadImg.src = imageUrl;\n        loadImg.onload = () => resolve(imageUrl);\n        loadImg.onerror = (err) => reject(err);\n      });\n    };\n\n    Promise.all(images.map((image) => loadImage(image)))\n      .then(() => setStatus(\"loaded\"))\n      .catch((err) => console.log(\"Failed to load images\", err));\n  }, [images, setStatus]);\n\n  switch (status) {\n    case \"loading\":\n      return (\n        <Box m={1} p={1}>\n          <GridList cellHeight={160} cols={4}>\n            {Array(8)\n              .fill(null)\n              .map((_, index) => {\n                return (\n                  <GridListTile key={index}>\n                    <Skeleton\n                      animation=\"wave\"\n                      variant=\"rect\"\n                      height={160}\n                    ></Skeleton>\n                  </GridListTile>\n                );\n              })}\n          </GridList>\n        </Box>\n      );\n    case \"loaded\":\n      return (\n        <Box m={1} p={1}>\n          <GridList cellHeight={160} cols={4}>\n            {images.map((src, index) => {\n              return (\n                <GridListTile key={index}>\n                  <img src={src} alt={`dog-${index}`} />\n                </GridListTile>\n              );\n            })}\n          </GridList>\n        </Box>\n      );\n    default:\n      return null;\n  }\n}\n\nexport default DogImages;\n","import axios from \"axios\";\nimport { DogsResponse, ImagesResponse } from \"../interfaces\";\n\nconst dogAPI = {\n  getDogs: function () {\n    return axios.get<DogsResponse>(\"https://dog.ceo/api/breeds/list/all\");\n  },\n  getImages: function (query: string) {\n    return axios.get<ImagesResponse>(`https://dog.ceo/api/breed/${query}/images/random/8`);\n  },\n};\n\nexport default dogAPI;\n","import { MouseEvent, useState } from \"react\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport DogImages from \"./DogImages\";\nimport API from \"../utils/API\";\nimport { Status } from \"../interfaces\";\n\ninterface Props {\n  dogs: string[];\n}\n\nfunction DogTable({ dogs }: Props) {\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    setStatus(\"loading\");\n    const breed = event.currentTarget.innerText.toLowerCase();\n    API.getImages(breed).then((results) => {\n      const images = results.data.message;\n      setImages(images);\n    });\n  };\n\n  const [status, setStatus] = useState<Status>(\"ready\");\n  const [images, setImages] = useState<string[]>([]);\n\n  return (\n    <>\n      {dogs.length ? (\n        <Grid container spacing={3}>\n          {dogs.map((breed, index) => {\n            return (\n              <Grid item key={index} xs={3}>\n                <Button\n                  variant=\"contained\"\n                  fullWidth={true}\n                  onClick={handleClick}\n                >\n                  {breed}\n                </Button>\n              </Grid>\n            );\n          })}\n        </Grid>\n      ) : (\n        <Grid container spacing={3}>\n          {Array(12)\n            .fill(null)\n            .map((_, index) => {\n              return (\n                <Grid item key={index} xs={3}>\n                  <Skeleton\n                    animation=\"wave\"\n                    variant=\"text\"\n                    width=\"100%\"\n                    height={40}\n                  ></Skeleton>\n                </Grid>\n              );\n            })}\n        </Grid>\n      )}\n      <DogImages images={images} status={status} setStatus={setStatus}></DogImages>\n    </>\n  );\n}\n\nexport default DogTable;\n","import { Box, Container, TextField, Typography } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport DogTable from \"./components/DogTable\";\nimport API from \"./utils/API\";\n\nfunction App() {\n  const [allDogs, setAllDogs] = useState<string[]>([]);\n  const [filteredDogs, setFilteredDogs] = useState<string[]>([]);\n\n  useEffect(() => {\n    API.getDogs().then((results) => {\n      const dogsArray = Object.keys(results.data.message);\n      setAllDogs(dogsArray);\n      setFilteredDogs(dogsArray);\n    });\n  }, []);\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const filter = event.target.value.toLowerCase();\n    const filteredList = allDogs.filter((dog) => {\n      return dog.indexOf(filter) !== -1;\n    });\n    setFilteredDogs(filteredList);\n  };\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Box display=\"flex\" justifyContent=\"space-between\" p={1} m={1}>\n          <Box p={1}>\n            <Typography variant=\"h1\">Dogs!</Typography>\n          </Box>\n          <Box p={1} m={1}>\n            <TextField\n              id=\"search-breeds\"\n              label=\"Search\"\n              onChange={handleSearchChange}\n            />\n          </Box>\n        </Box>\n        <DogTable dogs={filteredDogs.slice(0, 12)} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}